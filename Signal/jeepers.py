# This file is part of ZNC-Signal <https://github.com/poppyschmo/znc-signal>,
# licensed under Apache 2.0 <http://www.apache.org/licenses/LICENSE-2.0>.

"""
Miscellaneous objects for the DBus connection
"""

from asyncio.events import AbstractEventLoop
from asyncio.futures import Future as AsyncFuture
from jeepney.wrappers import MessageGenerator, new_method_call  # noqa E402
from typing import List, TypeVar
from collections import namedtuple


R = TypeVar("R", str, List[str])

incoming_NT = namedtuple("Incoming",
                         "timestamp source groupID message attachments")


class SignalMG(MessageGenerator):
    """Modified auto-generated DBus bindings
    Generated by jeepney version 0.3.1
    Object path: /org/asamk/Signal
    Bus name   : org.asamk.Signal
    """
    interface = 'org.asamk.Signal'

    def __init__(self, object_path='/org/asamk/Signal',
                 bus_name='org.asamk.Signal'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def updateGroup(self, groupId: List[bytes], name: str, members: List[str],
                    avatar: str):
        return new_method_call(self, 'updateGroup', 'aysass',
                               (groupId, name, members, avatar))

    def sendEndSessionMessage(self, recipients: List[str]):
        return new_method_call(self, 'sendEndSessionMessage', 'as',
                               (recipients,))

    def sendGroupMessage(self, message: str, attachments: List[str],
                         groupId: List[bytes]):
        return new_method_call(self, 'sendGroupMessage', 'sasay',
                               (message, attachments, groupId))

    # Overloaded
    def sendMessage(self, message: str, attachments: List[str], recip: R):
        signature = "sass" if isinstance(recip, str) else "sasas"
        return new_method_call(self, 'sendMessage',
                               signature, (message, attachments, recip))

    def getContactName(self, number: str):
        return new_method_call(self, 'getContactName', 's', (number,))

    def setContactName(self, number: str, name: str):
        return new_method_call(self, 'setContactName', 'ss', (number, name))

    def getGroupName(self, groupId: List[bytes]):
        return new_method_call(self, 'getGroupName', 'ay', (groupId,))

    def getGroupMembers(self, groupId: List[bytes]):
        return new_method_call(self, 'getGroupMembers', 'ay', (groupId,))


class FakeLoop(AbstractEventLoop):
    """Kludge for DBusConnection's incoming data dispatcher (router)

    Obviously, this is pure mockery and not a real shim.
    """
    def __init__(self, module):
        self.module = module

    def call_later(self, delay, callback, *args):
        """This is actually ``call_soon``"""
        assert delay == 0
        callback(*args)

    def get_debug(self):
        return False


class FakeFuture(AsyncFuture):
    fake_loop = None

    def __init__(self):
        super().__init__(loop=self.fake_loop)


signal_service = SignalMG()


def get_msggen(name):
    """Return a MessageGenerator instance for D-Bus object <name>"""
    if name == "Signal":
        mg = signal_service
    elif name == "DBus":
        from jeepney.bus_messages import message_bus
        mg = message_bus
    elif name in ("Stats", "Monitoring"):
        import jeepney.bus_messages as bm
        mg = getattr(bm, name)()
    else:
        raise ValueError("Unable to determine target object")
    return mg
